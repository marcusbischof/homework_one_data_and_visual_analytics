-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

/* Create the movie table. */
CREATE TABLE movies(
   id INT,
   name TEXT,
   score INT
);

/* Create the movie_cast table. */
CREATE TABLE movie_cast(
   movie_id INT,
   cast_id INT,
   cast_name TEXT
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

/* Structure of the provided .txt files is comma-separated values. */
.mode csv
.import ./movie-name-score.txt movies
.import ./movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

/* Create indices on movies and movie_cast to speed up operations. */
CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

/* Turn on headers so that we see column name(s) in output. */
.headers on

/* Calculates the proportion of movies with score > 50. */
select (t.scores_gt_fifty * 1.0) / (s.total_scores * 1.0) as prop
from
(select count(*) as scores_gt_fifty from movies where score > 50) t,
(select count(*) as total_scores from movies) s;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

/*
  Select the 7 highest scoring movies.
  Order first by score, desc, then by name, asc.
*/
select *
from movies
order by score desc, name asc
limit 7;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

/*
  We want to ensure that we group by cast_id and cast_name in order to output
  these fields in the aggregation.
*/
select cast_id, cast_name, count(movie_id) as movie_count
from movie_cast
group by cast_id, cast_name
order by movie_count desc, cast_name asc
limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

/*
  Inner select statements ensure that we are taking the average of the
  correct actors and movies as per the homework.
*/
select c.cast_id, c.cast_name, avg(m.score) as average_score
from
(
  select * from movies where score > 50
) m
inner join
(
  select m.cast_id, m.cast_name, m.movie_id from
  movie_cast m
  inner join
  (
    select cast_id from movie_cast group by cast_id having count(*) > 2
  ) c
  on c.cast_id == m.cast_id
) c
on m.id == c.movie_id
group by c.cast_id
order by average_score desc, c.cast_name asc
limit 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

/* View that contains "good collaborators". */
create view good_collaboration
as select a.cast_member_id1, a.cast_member_id2, a.movie_count, avg(a.score) as average_movie_score
  from (
    select actor_pairs.cast_id_1 as cast_member_id1, actor_pairs.cast_id_2 as cast_member_id2, actor_pairs.num as movie_count, scores.score
    from
    (
      select c.cast_id_1, c.cast_id_2, movie_id, count(*) as num
      from (
        select distinct a.cast_id as cast_id_1, b.cast_id as cast_id_2, a.movie_id
        from movie_cast a inner join movie_cast b on a.movie_id = b.movie_id
      ) c
      where c.cast_id_1 <> c.cast_id_2
      group by cast_id_1, cast_id_2
      having count(*) > 3
    ) actor_pairs inner join movies scores
    on actor_pairs.movie_id = scores.id
  ) a
  where a.cast_member_id1 > a.cast_member_id2
  group by a.cast_member_id1, a.cast_member_id2
  having avg(a.score) >= 40;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --
